// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repositories

import (
	"context"
	"database/sql"
)

const addDeviceToTeam = `-- name: AddDeviceToTeam :exec
INSERT INTO team_devices (team_id, device_id)
VALUES ($1, $2)
`

type AddDeviceToTeamParams struct {
	TeamID   int32 `json:"team_id"`
	DeviceID int32 `json:"device_id"`
}

func (q *Queries) AddDeviceToTeam(ctx context.Context, arg AddDeviceToTeamParams) error {
	_, err := q.db.ExecContext(ctx, addDeviceToTeam, arg.TeamID, arg.DeviceID)
	return err
}

const addUserToTeam = `-- name: AddUserToTeam :exec
INSERT INTO user_teams (user_id, team_id)
VALUES ($1, $2)
`

type AddUserToTeamParams struct {
	UserID int32 `json:"user_id"`
	TeamID int32 `json:"team_id"`
}

func (q *Queries) AddUserToTeam(ctx context.Context, arg AddUserToTeamParams) error {
	_, err := q.db.ExecContext(ctx, addUserToTeam, arg.UserID, arg.TeamID)
	return err
}

const assignUserTeamPermission = `-- name: AssignUserTeamPermission :exec
INSERT INTO user_team_permissions (user_id, team_id, permission_id)
VALUES ($1, $2, $3)
`

type AssignUserTeamPermissionParams struct {
	UserID       int32 `json:"user_id"`
	TeamID       int32 `json:"team_id"`
	PermissionID int32 `json:"permission_id"`
}

func (q *Queries) AssignUserTeamPermission(ctx context.Context, arg AssignUserTeamPermissionParams) error {
	_, err := q.db.ExecContext(ctx, assignUserTeamPermission, arg.UserID, arg.TeamID, arg.PermissionID)
	return err
}

const countDevicesByTeam = `-- name: CountDevicesByTeam :many
SELECT t.id, t.name, COUNT(td.device_id) as device_count
FROM teams t
LEFT JOIN team_devices td ON t.id = td.team_id
GROUP BY t.id, t.name
ORDER BY t.name
`

type CountDevicesByTeamRow struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	DeviceCount int64  `json:"device_count"`
}

func (q *Queries) CountDevicesByTeam(ctx context.Context) ([]CountDevicesByTeamRow, error) {
	rows, err := q.db.QueryContext(ctx, countDevicesByTeam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountDevicesByTeamRow
	for rows.Next() {
		var i CountDevicesByTeamRow
		if err := rows.Scan(&i.ID, &i.Name, &i.DeviceCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countUsersByTeam = `-- name: CountUsersByTeam :many
SELECT t.id, t.name, COUNT(ut.user_id) as user_count
FROM teams t
LEFT JOIN user_teams ut ON t.id = ut.team_id
GROUP BY t.id, t.name
ORDER BY t.name
`

type CountUsersByTeamRow struct {
	ID        int32  `json:"id"`
	Name      string `json:"name"`
	UserCount int64  `json:"user_count"`
}

func (q *Queries) CountUsersByTeam(ctx context.Context) ([]CountUsersByTeamRow, error) {
	rows, err := q.db.QueryContext(ctx, countUsersByTeam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountUsersByTeamRow
	for rows.Next() {
		var i CountUsersByTeamRow
		if err := rows.Scan(&i.ID, &i.Name, &i.UserCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (cert_fingerprint, device_uuid, name)
VALUES ($1, $2, $3)
RETURNING id, cert_fingerprint, device_uuid, name, created_at, updated_at
`

type CreateDeviceParams struct {
	CertFingerprint string         `json:"cert_fingerprint"`
	DeviceUuid      string         `json:"device_uuid"`
	Name            sql.NullString `json:"name"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, createDevice, arg.CertFingerprint, arg.DeviceUuid, arg.Name)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CertFingerprint,
		&i.DeviceUuid,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (view_locations, view_route_history, manage_devices, manage_users, manage_team)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, view_locations, view_route_history, manage_devices, manage_users, manage_team, created_at, updated_at
`

type CreatePermissionParams struct {
	ViewLocations    sql.NullBool `json:"view_locations"`
	ViewRouteHistory sql.NullBool `json:"view_route_history"`
	ManageDevices    sql.NullBool `json:"manage_devices"`
	ManageUsers      sql.NullBool `json:"manage_users"`
	ManageTeam       sql.NullBool `json:"manage_team"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.ViewLocations,
		arg.ViewRouteHistory,
		arg.ManageDevices,
		arg.ManageUsers,
		arg.ManageTeam,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.ViewLocations,
		&i.ViewRouteHistory,
		&i.ManageDevices,
		&i.ManageUsers,
		&i.ManageTeam,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateTeam(ctx context.Context, name string) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, username)
VALUES ($1, $2, $3)
RETURNING id, email, password, username, created_at, updated_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions
WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT id, cert_fingerprint, device_uuid, name, created_at, updated_at FROM devices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CertFingerprint,
		&i.DeviceUuid,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeviceByCertFingerprint = `-- name: GetDeviceByCertFingerprint :one
SELECT id, cert_fingerprint, device_uuid, name, created_at, updated_at FROM devices
WHERE cert_fingerprint = $1 LIMIT 1
`

func (q *Queries) GetDeviceByCertFingerprint(ctx context.Context, certFingerprint string) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceByCertFingerprint, certFingerprint)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CertFingerprint,
		&i.DeviceUuid,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeviceByUuid = `-- name: GetDeviceByUuid :one
SELECT id, cert_fingerprint, device_uuid, name, created_at, updated_at FROM devices
WHERE device_uuid = $1 LIMIT 1
`

func (q *Queries) GetDeviceByUuid(ctx context.Context, deviceUuid string) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceByUuid, deviceUuid)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CertFingerprint,
		&i.DeviceUuid,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeviceTeams = `-- name: GetDeviceTeams :many
SELECT t.id, t.name, t.created_at, t.updated_at FROM teams t
JOIN team_devices td ON t.id = td.team_id
WHERE td.device_id = $1
ORDER BY t.name
`

func (q *Queries) GetDeviceTeams(ctx context.Context, deviceID int32) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getDeviceTeams, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermission = `-- name: GetPermission :one
SELECT id, view_locations, view_route_history, manage_devices, manage_users, manage_team, created_at, updated_at FROM permissions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPermission(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.ViewLocations,
		&i.ViewRouteHistory,
		&i.ManageDevices,
		&i.ManageUsers,
		&i.ManageTeam,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeam = `-- name: GetTeam :one
SELECT id, name, created_at, updated_at FROM teams
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id int32) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT id, name, created_at, updated_at FROM teams
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByName, name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamDevices = `-- name: GetTeamDevices :many
SELECT d.id, d.cert_fingerprint, d.device_uuid, d.name, d.created_at, d.updated_at FROM devices d
JOIN team_devices td ON d.id = td.device_id
WHERE td.team_id = $1
ORDER BY d.name
`

func (q *Queries) GetTeamDevices(ctx context.Context, teamID int32) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getTeamDevices, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CertFingerprint,
			&i.DeviceUuid,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamUsers = `-- name: GetTeamUsers :many
SELECT u.id, u.email, u.password, u.username, u.created_at, u.updated_at FROM users u
JOIN user_teams ut ON u.id = ut.user_id
WHERE ut.team_id = $1
ORDER BY u.username
`

func (q *Queries) GetTeamUsers(ctx context.Context, teamID int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getTeamUsers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, username, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAllDevices = `-- name: GetUserAllDevices :many
SELECT DISTINCT d.id, d.cert_fingerprint, d.device_uuid, d.name, d.created_at, d.updated_at FROM devices d
JOIN team_devices td ON d.id = td.device_id
JOIN user_teams ut ON td.team_id = ut.team_id
WHERE ut.user_id = $1
ORDER BY d.name
`

func (q *Queries) GetUserAllDevices(ctx context.Context, userID int32) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getUserAllDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CertFingerprint,
			&i.DeviceUuid,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, username, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, password, username, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDevicesInTeam = `-- name: GetUserDevicesInTeam :many
SELECT DISTINCT d.id, d.cert_fingerprint, d.device_uuid, d.name, d.created_at, d.updated_at FROM devices d
JOIN team_devices td ON d.id = td.device_id
JOIN user_teams ut ON td.team_id = ut.team_id
WHERE ut.user_id = $1 AND ut.team_id = $2
ORDER BY d.name
`

type GetUserDevicesInTeamParams struct {
	UserID int32 `json:"user_id"`
	TeamID int32 `json:"team_id"`
}

func (q *Queries) GetUserDevicesInTeam(ctx context.Context, arg GetUserDevicesInTeamParams) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getUserDevicesInTeam, arg.UserID, arg.TeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CertFingerprint,
			&i.DeviceUuid,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissionsInTeam = `-- name: GetUserPermissionsInTeam :one
SELECT 
    p.view_locations,
    p.view_route_history,
    p.manage_devices,
    p.manage_users,
    p.manage_team
FROM permissions p
JOIN user_team_permissions utp ON p.id = utp.permission_id
WHERE utp.user_id = $1 AND utp.team_id = $2
LIMIT 1
`

type GetUserPermissionsInTeamParams struct {
	UserID int32 `json:"user_id"`
	TeamID int32 `json:"team_id"`
}

type GetUserPermissionsInTeamRow struct {
	ViewLocations    sql.NullBool `json:"view_locations"`
	ViewRouteHistory sql.NullBool `json:"view_route_history"`
	ManageDevices    sql.NullBool `json:"manage_devices"`
	ManageUsers      sql.NullBool `json:"manage_users"`
	ManageTeam       sql.NullBool `json:"manage_team"`
}

func (q *Queries) GetUserPermissionsInTeam(ctx context.Context, arg GetUserPermissionsInTeamParams) (GetUserPermissionsInTeamRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPermissionsInTeam, arg.UserID, arg.TeamID)
	var i GetUserPermissionsInTeamRow
	err := row.Scan(
		&i.ViewLocations,
		&i.ViewRouteHistory,
		&i.ManageDevices,
		&i.ManageUsers,
		&i.ManageTeam,
	)
	return i, err
}

const getUserTeamPermissions = `-- name: GetUserTeamPermissions :many
SELECT p.id, p.view_locations, p.view_route_history, p.manage_devices, p.manage_users, p.manage_team, p.created_at, p.updated_at FROM permissions p
JOIN user_team_permissions utp ON p.id = utp.permission_id
WHERE utp.user_id = $1 AND utp.team_id = $2
ORDER BY p.id
`

type GetUserTeamPermissionsParams struct {
	UserID int32 `json:"user_id"`
	TeamID int32 `json:"team_id"`
}

func (q *Queries) GetUserTeamPermissions(ctx context.Context, arg GetUserTeamPermissionsParams) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeamPermissions, arg.UserID, arg.TeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.ViewLocations,
			&i.ViewRouteHistory,
			&i.ManageDevices,
			&i.ManageUsers,
			&i.ManageTeam,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeams = `-- name: GetUserTeams :many
SELECT t.id, t.name, t.created_at, t.updated_at FROM teams t
JOIN user_teams ut ON t.id = ut.team_id
WHERE ut.user_id = $1
ORDER BY t.name
`

func (q *Queries) GetUserTeams(ctx context.Context, userID int32) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isDeviceInTeam = `-- name: IsDeviceInTeam :one
SELECT EXISTS(
    SELECT 1 FROM team_devices
    WHERE team_id = $1 AND device_id = $2
)
`

type IsDeviceInTeamParams struct {
	TeamID   int32 `json:"team_id"`
	DeviceID int32 `json:"device_id"`
}

func (q *Queries) IsDeviceInTeam(ctx context.Context, arg IsDeviceInTeamParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isDeviceInTeam, arg.TeamID, arg.DeviceID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserInTeam = `-- name: IsUserInTeam :one
SELECT EXISTS(
    SELECT 1 FROM user_teams
    WHERE user_id = $1 AND team_id = $2
)
`

type IsUserInTeamParams struct {
	UserID int32 `json:"user_id"`
	TeamID int32 `json:"team_id"`
}

func (q *Queries) IsUserInTeam(ctx context.Context, arg IsUserInTeamParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserInTeam, arg.UserID, arg.TeamID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listDevices = `-- name: ListDevices :many
SELECT id, cert_fingerprint, device_uuid, name, created_at, updated_at FROM devices
ORDER BY name
`

func (q *Queries) ListDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, listDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CertFingerprint,
			&i.DeviceUuid,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissions = `-- name: ListPermissions :many
SELECT id, view_locations, view_route_history, manage_devices, manage_users, manage_team, created_at, updated_at FROM permissions
ORDER BY id
`

func (q *Queries) ListPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.ViewLocations,
			&i.ViewRouteHistory,
			&i.ManageDevices,
			&i.ManageUsers,
			&i.ManageTeam,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeams = `-- name: ListTeams :many
SELECT id, name, created_at, updated_at FROM teams
ORDER BY name
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTeamPermissions = `-- name: ListUserTeamPermissions :many
SELECT 
    u.id as user_id,
    u.username,
    t.id as team_id,
    t.name as team_name,
    p.id as permission_id,
    p.view_locations,
    p.view_route_history,
    p.manage_devices,
    p.manage_users,
    p.manage_team
FROM user_team_permissions utp
JOIN users u ON utp.user_id = u.id
JOIN teams t ON utp.team_id = t.id
JOIN permissions p ON utp.permission_id = p.id
ORDER BY u.username, t.name
`

type ListUserTeamPermissionsRow struct {
	UserID           int32        `json:"user_id"`
	Username         string       `json:"username"`
	TeamID           int32        `json:"team_id"`
	TeamName         string       `json:"team_name"`
	PermissionID     int32        `json:"permission_id"`
	ViewLocations    sql.NullBool `json:"view_locations"`
	ViewRouteHistory sql.NullBool `json:"view_route_history"`
	ManageDevices    sql.NullBool `json:"manage_devices"`
	ManageUsers      sql.NullBool `json:"manage_users"`
	ManageTeam       sql.NullBool `json:"manage_team"`
}

func (q *Queries) ListUserTeamPermissions(ctx context.Context) ([]ListUserTeamPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserTeamPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserTeamPermissionsRow
	for rows.Next() {
		var i ListUserTeamPermissionsRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.TeamID,
			&i.TeamName,
			&i.PermissionID,
			&i.ViewLocations,
			&i.ViewRouteHistory,
			&i.ManageDevices,
			&i.ManageUsers,
			&i.ManageTeam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, username, created_at, updated_at FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDeviceFromTeam = `-- name: RemoveDeviceFromTeam :exec
DELETE FROM team_devices
WHERE team_id = $1 AND device_id = $2
`

type RemoveDeviceFromTeamParams struct {
	TeamID   int32 `json:"team_id"`
	DeviceID int32 `json:"device_id"`
}

func (q *Queries) RemoveDeviceFromTeam(ctx context.Context, arg RemoveDeviceFromTeamParams) error {
	_, err := q.db.ExecContext(ctx, removeDeviceFromTeam, arg.TeamID, arg.DeviceID)
	return err
}

const removeUserFromTeam = `-- name: RemoveUserFromTeam :exec
DELETE FROM user_teams
WHERE user_id = $1 AND team_id = $2
`

type RemoveUserFromTeamParams struct {
	UserID int32 `json:"user_id"`
	TeamID int32 `json:"team_id"`
}

func (q *Queries) RemoveUserFromTeam(ctx context.Context, arg RemoveUserFromTeamParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromTeam, arg.UserID, arg.TeamID)
	return err
}

const revokeUserTeamPermission = `-- name: RevokeUserTeamPermission :exec
DELETE FROM user_team_permissions
WHERE user_id = $1 AND team_id = $2 AND permission_id = $3
`

type RevokeUserTeamPermissionParams struct {
	UserID       int32 `json:"user_id"`
	TeamID       int32 `json:"team_id"`
	PermissionID int32 `json:"permission_id"`
}

func (q *Queries) RevokeUserTeamPermission(ctx context.Context, arg RevokeUserTeamPermissionParams) error {
	_, err := q.db.ExecContext(ctx, revokeUserTeamPermission, arg.UserID, arg.TeamID, arg.PermissionID)
	return err
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices
SET cert_fingerprint = $2, device_uuid = $3, name = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, cert_fingerprint, device_uuid, name, created_at, updated_at
`

type UpdateDeviceParams struct {
	ID              int32          `json:"id"`
	CertFingerprint string         `json:"cert_fingerprint"`
	DeviceUuid      string         `json:"device_uuid"`
	Name            sql.NullString `json:"name"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, updateDevice,
		arg.ID,
		arg.CertFingerprint,
		arg.DeviceUuid,
		arg.Name,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CertFingerprint,
		&i.DeviceUuid,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions
SET view_locations = $2, view_route_history = $3, manage_devices = $4, manage_users = $5, manage_team = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, view_locations, view_route_history, manage_devices, manage_users, manage_team, created_at, updated_at
`

type UpdatePermissionParams struct {
	ID               int32        `json:"id"`
	ViewLocations    sql.NullBool `json:"view_locations"`
	ViewRouteHistory sql.NullBool `json:"view_route_history"`
	ManageDevices    sql.NullBool `json:"manage_devices"`
	ManageUsers      sql.NullBool `json:"manage_users"`
	ManageTeam       sql.NullBool `json:"manage_team"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermission,
		arg.ID,
		arg.ViewLocations,
		arg.ViewRouteHistory,
		arg.ManageDevices,
		arg.ManageUsers,
		arg.ManageTeam,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.ViewLocations,
		&i.ViewRouteHistory,
		&i.ManageDevices,
		&i.ManageUsers,
		&i.ManageTeam,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams
SET name = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateTeamParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeam, arg.ID, arg.Name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2, password = $3, username = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, password, username, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
